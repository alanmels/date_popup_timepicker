<?php
/**
 * @file
 * Working date_popup_timepicker.
 */

/**
 * Implements hook_element_info_alter().
 */
function date_popup_timepicker_element_info_alter(&$type) {
  // Hijack date_popup's processing of the field and add our own.
  if ($type['date_popup']['#timepicker'] == 'timepicker') {
    $type['date_popup']['#process'][] = 'date_popup_timepicker_date_popup_element_process';
    $type['date_popup']['#timepicker_options'] = array();
  }
}

/**
 * Implements element_process.
 */
function date_popup_timepicker_date_popup_element_process($element, &$form_state, $form) {
  // Add new timepicker variable for us to override with.
  $element['time'] = date_popup_timepicker_process_time_part($element);
  $element['time']['#attributes']['class'][] = 'ui-timepicker';


  $element['#attached']['library'][] = array('system', 'ui.core');
  $element['#attached']['library'][] = array('system', 'ui.widget');

  // Add Timepicker library.
  $element['#attached']['libraries_load'][] = array('timepicker');
  $element['#attached']['js'][] = drupal_get_path('module', 'date_popup_timepicker') . "/js/date_popup_timepicker.js";

  return $element;
}

/**
 * Implements hook_js_alter().
 *
 * Since we are overriding date pop up but are using the same render functions
 * we get some additional javascript settings that need to be removed. Go
 * through the javascript array and remove these extra settings so they dont get
 * called and cause conflicts with the new popup.
 */
function date_popup_timepicker_js_alter(&$javascript) {
  // Remove the timepicker functionality.
  foreach ($javascript['settings']['data'] as $index => $type) {
    if (isset($type['datePopup']) && is_array($type['datePopup'])) {
      $setting = array_pop($type['datePopup']);
      if ($setting['func'] == 'timeEntry') {
        unset($javascript['settings']['data'][$index]);
      }
    }
  }
}


/**
 * Implements hook_libraries_info().
 */
function date_popup_timepicker_libraries_info() {
  $libraries['timepicker'] = array(
    'name' => 'jQuery UI Timepicker',
    'vendor url' => 'https://fgelinas.com/code/timepicker',
    'download url' => 'https://fgelinas.com/code/timepicker/releases/jquery-ui-timepicker-0.3.3.zip',
    'version arguments' => array(
      'file' => 'jquery.ui.timepicker.js',
      'pattern' => '/version\: \"(\d\.\d.\d)\"/',
      'lines' => 43,
    ),
    'files' => array(
      'js' => array(
        'jquery.ui.timepicker.js',
      ),
      'css' => array(
        'jquery.ui.timepicker.css',
      ),
    ),
    'variants' => array(
      'source' => array(
        'files' => array(
          'js' => array(
            'jquery.ui.timepicker.js',
          ),
          'css' => array(
            'jquery.ui.timepicker.css',
          ),
        ),
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function date_popup_timepicker_form_date_popup_settings_alter(&$form, &$form_state) {
  $form['date_popup_timepicker']['#options']['timepicker'] = t("jQuery UI Timepicker");
}

/**
 * Process the time portion of the element.
 */
function date_popup_timepicker_process_time_part(&$element) {
  $element['#date_format'] = 'M j Y - g:i';

  // TODO Optimize this.
  $element['#timepicker_options'] += $element['#field']['settings']['timepicker'];
  $settings = $element['#timepicker_options'] + array(
      'timeSeparator' => ':',
      'showLeadingZero' => true,
      'showMinutesLeadingZero' => true,
      'showPeriod' => false,
      'showPeriodLabels' => true,
      'periodSeparator' => ' ',
      'altField' => '#alternate_input',
      'defaultTime' => '12:34',
      'showOn' => 'focus',
      'button' => null,
      'hourText' => 'Hour',
      'minuteText' => 'Minute',
      'amPmText' => ['AM', 'PM'],
      'myPosition' => 'left top',
      'atPosition' => 'left bottom',
      'beforeShow' => 'beforeShowCallback',
      'onSelect' => 'onSelectCallback',
      'onClose' => 'onCloseCallback',
      'onHourShow' => 'onHourShow',
      'onMinuteShow' => 'onMinuteShow',
      'hours' => array(
        'starts' => 0,
        'ends' => 23,
      ),
      'minutes' => array(
        'starts' => 0,
        'ends' => 55,
        'interval' => 5,
        'manual' => array()
      ),
      'rows' => 4,
      'showHours' => true,
      'showMinutes' => true,
      'minTime ' => array(
        'hour' => 'minHour',
        'minute' => 'minMinute',
      ),
      'maxTime' => array(
        'hour' => 'maxHour',
        'minute' => 'maxMinute'
      ),
    'showCloseButton' => false,
    'closeButtonText' => 'Done',
    'showNowButton' => false,
    'nowButtonText' => 'Now',
    'showDeselectButton' => false,
    'deselectButtonText' => 'Deselect'
    );

  // Create a unique id for each set of custom settings.
  $id = date_popup_js_settings_id($element['#id'], 'timepickerPopup', $settings);

  $parents = array_merge($element['#parents'], array('time'));
  $sub_element = array(
    '#type' => 'textfield',
    '#title' => theme('date_part_label_time', array('part_type' => 'time', 'element' => $element)),
    '#title_display' => $element['#date_label_position'] == 'above' ? 'before' : 'invisible',
    '#default_value' => $element['#value']['time'],
    '#id' => $id,
    '#size' => 15,
    '#maxlength' => 10,
    '#attributes' => $element['#attributes'],
    '#parents' => $parents,
    '#name' => array_shift($parents) . '['. implode('][', $parents) .']',
    '#ajax' => !empty($element['#ajax']) ? $element['#ajax'] : FALSE,
  );

  $sub_element['#value'] = $sub_element['#default_value'];

  $example_date = date_now();
  date_increment_round($example_date, $element['#date_increment']);
  $sub_element['#description'] = t('E.g., @date', array('@date' => date_format_date($example_date, 'custom', date_popup_time_format($element))));

  return ($sub_element);
}

/**
 * Implements hook_date_field_settings_form_alter().
 *
 * @see hook_field_settings_form()
 */
function date_popup_timepicker_date_field_settings_form_alter(&$form, $context) {
  if (isset($form['granularity']['#options']['second'])) {
    unset($form['granularity']['#options']['second']);
  }

  $form['#element_validate'][] = 'date_popup_timepicker_field_settings_validate';

  $showPeriod = $context['field']['settings']['timepicker']['showPeriod'];
  if (!$showPeriod) {
    $showPeriod = false;
  }

  $hourText = $context['field']['settings']['timepicker']['hourText'];
  if (!$hourText) {
    $hourText = t('Hour');
  }

  $minuteText = $context['field']['settings']['timepicker']['minuteText'];
  if (!$minuteText) {
    $minuteText = t('Minute');
  }

  $form['timepicker'] = array(
    '#type' => 'fieldset',
    '#title' => t('Timepicker settings'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['timepicker']['showPeriod'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show Period'),
    '#default_value' => $showPeriod,
  );

  $form['timepicker']['hourText'] = array(
    '#type' => 'textfield',
    '#title' => t('Locale text for "Hours"'),
    '#default_value' => $hourText,
  );

  $form['timepicker']['minuteText'] = array(
    '#type' => 'textfield',
    '#title' => t('Locale text for "Minute"'),
    '#default_value' => $minuteText,
  );
}

/**
 * Form validation handler for hook_date_field_settings_form_alter().
 */
function date_popup_timepicker_field_settings_validate(&$form, &$form_state) {

}
